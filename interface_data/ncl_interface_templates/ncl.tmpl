; This is a temporary file updated by Python on the fly
;------------------------------------------------------
load "./interface_scripts/messaging.ncl"


dictkeys = True
dictkeys@dictkeys = (/<<DICT_KEYS>>/)

figfiles_suffix = (/<<FIGFILES_SUFFIX>>/)

infile_paths  = (/<<INFILE_PATHS>>/)

infiles = (/<<INFILES>>/)

fullpaths = (/<<FULLPATHS>>/)

diag_script = <<DIAG_SCRIPT>>
diag_script_cfg = <<DIAG_SCRIPT_CFG>>

tags = (/<<TAGS>>/)

variables = (/<<VARIABLES>>/)
var_attr_mip = (/<<VAR_ATTR_MIP>>/)
var_attr_exp = (/<<VAR_ATTR_EXP>>/)
var_attr_ref = (/<<VAR_ATTR_REF>>/)
var_attr_exclude = (/<<VAR_ATTR_EXCLUDE>>/)
model_attr_skip  = (/<<MODEL_ATTR_SKIP>>/)
variable_def_dir = (/<<VARIABLE_DEF_DIR>>/)
derived_var = (/<<DERIVED_VAR>>/)

field_types = (/<<FIELD_TYPES>>/)
derived_field_type = (/<<DERIVED_FIELD_TYPE>>/)

out_refs = (/<<OUT_REFS>>/)
xml = (/<<XML>>/)
xml_name = (/<<XML_NAME>>/)
in_refs = (/<<IN_REFS>>/)

output_file_type = (/<<OUTPUT_FILE_TYPE>>/)
plot_dir = (/<<PLOT_DIR>>/)
wrk_dir = (/<<WRK_DIR>>/)
regridding_dir = (/<<REGRIDDING_DIR>>/)
write_netcdf = (/<<WRITE_NETCDF>>/)
read_from_vault = (/<<READ_FROM_VAULT>>/)
cwd = (/<<CWD>>/)
force_processing = (/<<FORCE_PROCESSING>>/)
show_debuginfo = (/<<SHOW_DEBUGINFO>>/)
show_diag_description  = (/<<SHOW_DIAG_DESCRIPTION>>/)

; climate.ncl variables
infilename = (/<<INFILENAME>>/)
mfile = (/<<MFILE>>/)
sfile = (/<<SFILE>>/)
afile = (/<<AFILE>>/)
base_variable = (/<<BASE_VARIABLE>>/)

max_data_filesize = (/<<MAX_DATA_FILESIZE>>/)

begin
    loadscript(<<DIAG_SCRIPT_CFG>>)
end


models = True
models@project    = (/<<MODELS_PROJECT>>/)
models@name       = (/<<MODELS_NAME>>/)
models@mip        = (/<<MODELS_MIP>>/)
models@experiment = (/<<MODELS_EXPERIMENT>>/)
models@ensemble   = (/<<MODELS_ENSEMBLE>>/)
models@start_year = (/<<MODELS_START_YEAR>>/)
models@end_year   = (/<<MODELS_END_YEAR>>/)
models@freq       = (/<<MODELS_FREQ>>/)
models@dir        = (/<<MODELS_DIR>>/)
models@level      = (/<<MODELS_LEVEL>>/)
models@case_name  = (/<<MODELS_CASE_NAME>>/)

model_attr_id = (/<<MODEL_ATTR_ID>>/)

fx_keys = (/<<FX_KEYS>>/)
fx_values = (/<<FX_VALUES>>/)

str_vault_sep = "-"

; Data structures to hold information on the
; reference/acknowledgement output file
ref_auth =(/<<REF_AUTH>>/)
ref_contr =(/<<REF_CONTR>>/)
ref_diag =(/<<REF_DIAG>>/)
ref_obs =(/<<REF_OBS>>/)
ref_proj =(/<<REF_PROJ>>/)
ref_script =(/<<REF_SCRIPT>>/)

undef("interface_get_idx_var")
function interface_get_idx_var(variable)
local idx_var
begin
    if (derived_var .eq. "Undefined") then
        idx_var = ind(variable .eq. variables)
    else
        idx_var = ind(derived_var .eq. variables)
    end if
    return idx_var
end

undef("interface_get_var_mip")
function interface_get_var_mip(idx [1] : integer,
                               variable [1] : string,
                               array [*] : string)
; Description:
;    Fetches the current MIP table, either from the models@-data
;    structure or, if specified, from the specific variable attribute
local array_local, idx_var
begin
    array_local = array
    ;; Default case (no variable attribute is specified)
    if (variable .eq. "default") then
        if (isatt(models, "mip")) then
            array_local = str_sub_str(array_local, "${MIP}", models@mip(idx))
        end if
    else  ; Variable attribute specified and should replace the models@-entry
        idx_var = interface_get_idx_var(variable)

        if (var_attr_mip(idx_var) .ne. "None") then
            array_local = str_sub_str(array_local, "${MIP}", var_attr_mip(idx_var))
        else
            if (isatt(models, "mip")) then
                array_local = str_sub_str(array_local, "${MIP}", models@mip(idx))
            end if
        end if
    end if
    return array_local
end

undef("interface_get_var_exp")
function interface_get_var_exp(idx [1] : integer,
                               variable [1] : string,
                               array [*] : string)
; Description:
;    Fetches the current experiment type, either from the models@-data
;    structure or, if specified, from the specific variable attribute
local array_local, idx_var
begin
    array_local = array
    ;; Default case (no variable attribute is specified)
    if (variable .eq. "default") then
        if (isatt(models, "experiment")) then
            array_local = str_sub_str(array_local, "${EXP}", models@experiment(idx))
        end if
    else  ; Variable attribute specified and should replace the models@-entry
        idx_var = interface_get_idx_var(variable)

        if (var_attr_exp(idx_var) .ne. "None") then
            array_local = str_sub_str(array_local, "${EXP}", var_attr_exp(idx_var))
        else
            if (isatt(models, "experiment")) then
                array_local = str_sub_str(array_local, "${EXP}", models@experiment(idx))
            end if
        end if
    end if
    return array_local
end

undef("interface_replace_place_holders")
function interface_replace_place_holders(variable [1] : string,
                                         field [1] : string,
                                           idx [1] : integer,
                      array_with_place_holders [*] : string)
;                                   return val [1] : string
; Arguments:
;         @brief Reconstructs the current (idx) input path + filename
;         @param variable  -  Current variable
;         @param idx  -  The index to the current model
;         @param field  -  Current field type
;         @param array_with_place_holders  - array with place holder strings
local verbosity, idx_var, array_local_copy
begin
    verbosity  = stringtointeger(getenv("ESMValTool_verbosity"))
    info_output("<<<<<<<< Entering interface_replace_place_holders", verbosity, 6)

    array_local_copy = str_sub_str(array_with_place_holders(idx), "${VARIABLE}", variable)
    array_local_copy = str_sub_str(array_local_copy, "${FIELD}", field)

    array_local_copy = interface_get_var_mip(idx, variable, array_local_copy)
    array_local_copy = interface_get_var_exp(idx, variable, array_local_copy)

    info_output(">>>>>>>> Leaving interface_replace_place_holders", verbosity, 6)
    return array_local_copy
end

undef("interface_get_figure_filename")
function interface_get_figure_filename(diag_script_base [1] : string,
                                           variable [1] : string,
                                         field_type [1] : string,
                                           aux_info [1] : string,
                                            idx_mod [1] : integer)
;                                        return val [1] : string
;   Arguments:
;         @brief Construct a figure output file name
;         @param diags_script_base  -  The current running diag script without
;                                      it's suffix
;         @param variable  -  Current variable
;         @param field_type  -  Current field type
;         @param aux_info  -  User supplied info to put in figure filename
;         @param idx_mod  -  Current model number, set to -1 if not applicable
local verbosity, aux_sep, figure_name, fig_file_local_copy, use_this_for_var
begin
    verbosity  = stringtointeger(getenv("ESMValTool_verbosity"))
    info_output("<<<<<<<< Entering interface_get_figure_filename", verbosity, 4)
    sep = "_"  ; Default separator
    aux_sep = "_"  ; Auxiliary info separator
    if (aux_info .eq. "") then
        aux_sep = ""  ; Auxiliary info separator if no aux-info
    else
        aux_info = str_sub_str(aux_info, "_", "-")
    end if

    if (idx_mod .eq. -1) then
        figure_name = diag_script_base + sep + variable \
                                       + sep + field_type \
                                       + aux_sep + aux_info
    else
        if (any(ismissing(ind(variable .eq. variables)))) then
            use_this_for_var = "default"
        else
            use_this_for_var = variable
        end if

        fig_file_local_copy = interface_replace_place_holders(use_this_for_var,\
                                                              field_type,\
                                                              idx_mod,\
                                                              figfiles_suffix)
        figure_name = diag_script_base + sep + variable \
                                       + sep + field_type \
                                       + sep + aux_info + aux_sep \
                                       + fig_file_local_copy
    end if
    info_output(">>>>>>>> Leaving interface_get_figure_filename", verbosity, 4)
    return figure_name
end

undef("interface_get_fullpath")
function interface_get_fullpath(variable [1] : string,
                                   field [1] : string,
                                     idx [1] : integer)
;                             return val [1] : string
; Arguments:
;         @brief Reconstructs the current (idx) input path + filename
;         @param variable  -  Current variable
;         @param idx  -  The index to the current model
;         @param field  -  Current field type
local verbosity, idx_var, fullpaths_local_copy
begin
    verbosity  = stringtointeger(getenv("ESMValTool_verbosity"))
    info_output("<<<<<<<< Entering interface_get_fullpath", verbosity, 4)
    fullpaths_local_copy = interface_replace_place_holders(variable, field, idx, fullpaths)
    info_output(">>>>>>>> Leaving interface_get_fullpath", verbosity, 4)
    return fullpaths_local_copy
end

undef("interface_get_infile")
function interface_get_infile(variable [1] : string,
                                 field [1] : string,
                                   idx [1] : integer)
;                           return val [1] : string
; Arguments:
;         @brief Reconstructs the current (idx) input filename
;         @param variable  -  Current variable
;         @param idx  -  The index to the current model
;         @param field  -  Current field type
local verbosity, infiles_local_copy
begin
    verbosity  = stringtointeger(getenv("ESMValTool_verbosity"))
    info_output("<<<<<<<< Entering interface_get_infile", verbosity, 4)
    infiles_local_copy = interface_replace_place_holders(variable, field, idx, infiles)
    info_output(">>>>>>>> Leaving interface_get_infile", verbosity, 4)
    return infiles_local_copy
end

undef("interface_get_inpaths")
function interface_get_inpaths(idx [1] : integer)
;                       return val [1] : string
; Arguments:
;         @brief Returns the current (idx) path to the input filename
;         @param idx  -  The index to the current model
local verbosity
begin
    verbosity  = stringtointeger(getenv("ESMValTool_verbosity"))
    info_output("<<<<<<<< Entering interface_get_inpaths", verbosity, 4)
    info_output(">>>>>>>> Leaving interface_get_inpaths", verbosity, 4)
    return infile_paths(idx)
end

undef("interface_get_dictkeys")
function interface_get_dictkeys(variable [1] : string,
                                     idx [1] : integer)
;                             return val [1] : string
; Arguments:
;         @brief Reconstructs the current (idx) dictionary keys
;         @param variable  -  Current variable
;         @param idx  -  The index to the current model
;         @param field  -  Current field type
local verbosity, idx_var, dictkeys_local_copy
begin
    verbosity  = stringtointeger(getenv("ESMValTool_verbosity"))
    info_output("<<<<<<<< Entering interface_get_dictkeys", verbosity, 4)
    dictkeys_local_copy = interface_replace_place_holders(variable, "NO_FIELD", idx, dictkeys@dictkeys)
    info_output(">>>>>>>> Leaving interface_get_dictkeys", verbosity, 4)
    return dictkeys_local_copy
end

undef("interface_get_dictkeys_no_var")
function interface_get_dictkeys_no_var(idx [1] : integer)
;                             return val [1] : string
; Arguments:
;         @brief Reconstructs the current (idx) dictionary keys
;         @param idx  -  The index to the current model
;         @param field  -  Current field type
local verbosity, idx_var, dictkeys_local_copy
begin
    verbosity  = stringtointeger(getenv("ESMValTool_verbosity"))
    info_output("<<<<<<<< Entering interface_get_dictkeys", verbosity, 4)
    dictkeys_local_copy = interface_replace_place_holders("default", "NO_FIELD", idx, dictkeys@dictkeys)
    info_output(">>>>>>>> Leaving interface_get_dictkeys", verbosity, 4)
    return dictkeys_local_copy
end

undef("noop")
procedure noop()
; no-operation
begin
end

; == Wrapper definitions used extend/redefine existing NCL routines ==

undef("addfile_wrapper")
function addfile_wrapper(filename [1]: string, operation [1]:string)
;                       return [file]: file_handle
; Description:
;         Logs any file access using the addfile function to a log file.
;         To use the wrapper, run the following line to replace all
;          addfile-occurances
;
; find . -type f -name '*ncl' ! -iregex '.*to_be_checked.*' -exec sed -i 's/addfile/addfile_wrapper/g' {} \;
;
local fhandle, logfile, datestamp, use_addfile_wrapper
begin
    verbosity  = stringtointeger(getenv("ESMValTool_verbosity"))
    info_output("<<<<<<<< Entering addfile_wrapper", verbosity, 4)

    logfile = "addfile_access.log"
    datestamp = systemfunc("date -u")
    operation = str_lower(operation)
    if (operation .eq. "r") then
        logfile_prefix = "'READ:   '"
    else if (operation .eq. "w") then
        logfile_prefix = "'WRITE:  '"
    else if (operation .eq. "c") then
        logfile_prefix = "'CREATE: '"
    end if
    end if
    end if

    system("echo " + datestamp + "  --  " + logfile_prefix + filename + " >> " + logfile)
    fhandle = addfile(filename, operation)

    info_output(">>>>>>>> Leaving addfile_wrapper", verbosity, 4)
    return fhandle
end

undef("isfilepresent_esmval")
function isfilepresent_esmval(file_path [1]: string)
;                             return_val [dimsizes(file_path)] :  logical
; Description
;         Wrapper introduced to handle the backwards-incompatitable changes
;         introduced in NCL v6.2.1, see the official announcement for details,
;
; http://www.ncl.ucar.edu/current_release.shtml#BackwardsIncompatibleChanges6.2.1
;
;         This wrapper checks the existance of any path for any NCL version,
;         i.e., pre- and post- version 6.2.1).
; Arguments:
;         @brief isfilepresent(...) work-around for NCL v6.2.1 code changes
;         @param file_path  -  single path as string to check for existence
local ASCII_ZERO,   FILEEXISTS_MIN_VERSION,  file_is_present,\
    ncl_version,  temp_char,               temp_int_1,\
    temp_int_2,   temp_str,                use_fileexists
begin
    ASCII_ZERO = 48  ; Used for char to int single digit conversion
    FILEEXISTS_MIN_VERSION = (/6, 2, 1/)  ;; 'fileexists' only available
                                          ;; in 6.2.1+

    ;; Get NCL version, to determine whether to use 'fileexists' or
    ;; 'isFilePresent'

    ncl_version = (/0, 0, 0/)  ; Start with an undefined value
    temp_str = get_ncl_version()
    temp_char = stringtochar(temp_str)
    ncl_version(0) = chartointeger(temp_char(0))\
                      - ASCII_ZERO  ; Convert ascii to 0-9
    ncl_version(1) = chartointeger(temp_char(2))\
                      - ASCII_ZERO  ; Convert ascii to 0-9
    ncl_version(2) = chartointeger(temp_char(4))\
                      - ASCII_ZERO  ; Convert ascii to 0-9

    ;; Determine whether version is sufficient for use of 'fileexists'
    temp_int_1 = ncl_version(0) * 100\
                 + ncl_version(1) * 10\
                 + ncl_version(2)
    temp_int_2 = FILEEXISTS_MIN_VERSION(0) * 100\
                 + FILEEXISTS_MIN_VERSION(1) * 10\
                 + FILEEXISTS_MIN_VERSION(2)
    use_fileexists = temp_int_1.ge.temp_int_2

    ;; Set default return value
    file_is_present = False

    if (use_fileexists) then  ; Only for version >= 6.2.1
        if (fileexists(file_path)) then
            file_is_present = True
        end if
    else
        if (isfilepresent(file_path)) then  ; Only for version < 6.2.1
            file_is_present = True
        end if
    end if
    return file_is_present
end
