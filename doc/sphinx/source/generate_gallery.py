#!/usr/bin/env python
"""Create gallery with all available recipes."""

import html
import os
from pathlib import Path

from docutils import nodes
from docutils.core import publish_doctree

RECIPE_DIR = "recipes"
OUT_PATH = os.path.abspath("gallery.rst")
HEADER = (
    ":html_theme.sidebar_secondary.remove:\n\n"
    ".. DO NOT MODIFY! THIS PAGE IS AUTOGENERATED!\n\n"
    "#######\nGallery\n#######\n\n"
    "This section shows example plots produced by ESMValTool. For more "
    "information, follow the links in the figure captions."
    "A website displaying results produced with the latest release of "
    "ESMValTool for all available recipes can be accessed `here "
    "<https://esmvaltool.dkrz.de/shared/esmvaltool/stable_release/>`_."
    "\n\n"
)
MAX_CAPTION_LENGTH = 100

START_GALLERY = '.. raw:: html\n\n    <div class="gallery">\n\n'

END_GALLERY = "\n.. raw:: html\n\n    </div>\n\n"

FIGURE_HTML = (
    ".. figure:: {uri}\n    :width: 100%\n\n    :ref:`{caption} <{link}>`\n\n"
)


def _has_gallery_marker(node):
    """Wether the node is preceeded by a ``.. gallery`` comment."""
    siblings = list(node.parent)
    idx = siblings.index(node)
    if idx <= 0:
        return False
    prev_node = siblings[idx - 1]
    if not isinstance(prev_node, nodes.comment):
        return False
    return prev_node.astext().lower().strip().startswith("gallery")


def _is_excluded_from_gallery(node):
    """Wether the node has a no-gallery marker."""
    comments = node.traverse(nodes.comment)
    for comment in comments:
        if comment.astext().lower().strip() == "no-gallery":
            return True
    return False


def _get_figures_from_file(fname):
    """Get marked, no or first figure from documentation page."""
    with (Path(RECIPE_DIR) / fname).open() as f:
        content = f.read()
    tree = publish_doctree(content, settings_overrides={"report_level": 5})
    try:
        link = content.split("\n")[0].split(" ")[1][1:-1]
    except IndexError:
        print(f"No label found in first line of {fname}. Skipping")
        return []
    if _is_excluded_from_gallery(tree):  # ignore files with no-gallery marker
        return []
    figures = tree.traverse(nodes.figure)
    for fig in figures:
        fig["link"] = link  # add doc page link to figure
    marked_figures = [f for f in figures if _has_gallery_marker(f)]
    if len(marked_figures) > 0:  # consider all figures with gallery marker
        return marked_figures
    if len(figures) > 0:  # select first figure if nothing is marked
        return [figures[0]]
    return []


def _get_data_from_figure(figure):
    image = figure.traverse(nodes.image)[0]
    try:
        caption = figure.traverse(nodes.caption)[0].astext().strip()
    except IndexError:
        caption = "No caption available"
    if len(caption) > MAX_CAPTION_LENGTH:
        caption = caption[:MAX_CAPTION_LENGTH] + "..."
    return {
        "uri": html.escape(image["uri"]),
        "caption": html.escape(caption.replace("\n", " ")),
        "link": html.escape(figure["link"]),
    }


def _find_recipes(root_dir, exclude_dirs):
    return [
        path.relative_to(root_dir)
        for path in Path(root_dir).rglob("recipe_*.rst")
        if not any(
            path.parents[0].name.startswith(exclude)
            for exclude in exclude_dirs
        )
    ]


def _generate_rst_file(fname, data):
    """Generate rst file from data."""
    output = ""
    output += HEADER
    output += START_GALLERY
    for figure_data in data:
        output += FIGURE_HTML.format(**figure_data)
    output += END_GALLERY
    with open(fname, "w") as f:
        f.write(output)
    print(f"Wrote {fname}")


def main():
    """Generate gallery for recipe plots."""
    print(f"Generating gallery at {OUT_PATH}")
    figures = []
    fnames = _find_recipes(RECIPE_DIR, ["legacy", "figures"])
    for filename in sorted(fnames):
        figures.extend(_get_figures_from_file(filename))
    data = [_get_data_from_figure(f) for f in figures]
    _generate_rst_file(OUT_PATH, data)


if __name__ == "__main__":
    main()
