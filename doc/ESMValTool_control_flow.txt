main.py input_xml_file
  | 
  |-xml_parsers.projectHandler(input_xml_file)
  |   Parses 'input_xml_file' which has the following main tags, 
  |                    <GLOBAL>: runtime switches, paths, etc
  |                    <MODEL>: a number of entries defining which netCDF-
  |                             files (models/obs) to work with
  |                    <DIAGNOSTICS>: set of <diagnostics>-tags to execute, i.e., 
  |                                   scripts for plotting or processing data.
  |    The xml content is placed in the 'project_info'-dictionary. The dictionary
  |    format is 'project_info[GLOBAL|MODEL|DIAGNOSTICS][sub_key]' and is used
  |    throughout the pyhton code.
  |
  |-Create an empty references/acknowledgement file (to be filled in the plot scripts?)
  | 
  |-loop over 'project_info[DIAGNOSTICS]'
  |   |   Each <diagnostic>-object being iterated defines parameters, the corresponding
  |   |   parameter fields, a diagnostic script, and optionally "diagnostic specific"-models
  |   |   (valid only in the current <diagnostic>-tag).
  |   |
  |   |-loop over base parameters
  |   |   |   I.e., parameters that do not need any processing. These parameters are
  |   |   |   either directly accessible from netCDF files or are the "parent"
  |   |   |   parameters of derived parameters (computed below).
  |   |   |
  |   |   |-loop over models
  |   |   |   |-reformat.cmor_reformat(...)
  |   |   |   |   Rewrite parameter input file while standardizing and checking parameter
  |   |   |   |   attributes for consistency. Write the file into the specified
  |   |   |   |   time chunk
  |   |   |   |-climate(...)
  |   |   |   |   compute climatology, annual, seasonal, monthly, for the chosen parameter
  |   |
  |   |-loop over requested parameters
  |   |   |   If the requested is a derived parameter, compute and write it to
  |   |   |   file using the base parameters defined above. Skip this step if
  |   |   |   the derived parameter file already exists.
  |   | 
  |   |-execute current <diag> diagnostic script
  |   |   |-projects.run_executable(diag_script.suffix, ...)
  |   |   |   |-write_data_interface(diag_script.suffix, ...)
  |   |   |   |   |-data_interface.suffix_data_interface(...)
  |   |   |   |   |   Uses the diagnostic script suffix to pick the correct data interface
  |   |   |   |   |   routine. The interface routine will rewrite any configuration
  |   |   |   |   |   so it is accessible in the target diagnostic script language. Suffix
  |   |   |   |   |   is one of, "ncl", "r" or "m" (NCL, R and Matlab respectively).
  |   |   |   |
  |   |   |   |-launchers.suffix_launcher(diag_script.suffix, ...)
  |   |   |   |   |   Uses the diagnostic script suffix to pick the correct diagnostic script
  |   |   |   |   |   launch routine. As above, suffix is one of "ncl", "r" or "m".
  |   |   |   |   |
  |   |   |   |   |-diagnostic script
  |   |   |   |   |   a) Reads the configuration prepared by the above data interface routine,
  |   |   |   |   |   b) reads the specified (and processed) parameter files, 
  |   |   |   |   |   c) processes the read data, 
  |   |   |   |   |   d) output figures, netCDF statistic files, etc...
