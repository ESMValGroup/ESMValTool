---
version: 2.1

orbs:
  coverage-reporter: codacy/coverage-reporter@11.9.2

commands:
  check_changes:
    steps:
      - run: |
          if (test "$CIRCLE_BRANCH" = master ||
            git --no-pager diff --name-only origin/master... |
            grep -q -E -f .circleci/install_triggers)
          then
            echo Running installation tests
          else
            echo Skipping installation tests
            circleci step halt
          fi

jobs:
  test:
    # Run Python 3 tests
    working_directory: /test
    docker:
      - image: esmvalgroup/esmvaltool:development
    steps:
      - checkout
      - run:
          # Update environment if needed and run tests
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            mkdir /logs
            conda --version > /logs/conda_version.txt
            conda activate esmvaltool
            python --version > /logs/python_version.txt
            conda env export > /logs/environment.yml
            pip install .[test] > /logs/install.txt
            # Run flake8 check with source code (it doesn't work without it)
            pytest -n 2 -m flake8
            # Update/install Julia and R dependencies
            esmvaltool install Julia > /logs/install_Julia.txt
            esmvaltool install R > /logs/install_R.txt
            # Remove source to test installed software
            rm -r esmvaltool
            pytest -n 2 -m 'not flake8'
      - store_artifacts:
          path: /logs
      - store_artifacts:
          path: test-reports/
      - store_test_results:
          path: test-reports/
      - coverage-reporter/send_report:
          coverage-reports: 'test-reports/coverage.xml'
          project-token: $CODACY_PROJECT_TOKEN
          # Skip if token isn't defined.
          # Useful to let forks CI pass without passing secrets
          skip: true

  test_installation:
    # Test Python 3 installation
    working_directory: /test_installation
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - check_changes
      - restore_cache:
          key: test-install-{{ .Branch }}
      - run:
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            set -x
            mkdir /logs
            # Install
            wget https://julialang-s3.julialang.org/bin/linux/x64/1.0/julia-1.0.3-linux-x86_64.tar.gz
            tar xfz julia-*-linux-x86_64.tar.gz
            ln -s $(pwd)/julia-*/bin/julia /usr/bin/julia
            # conda update -y conda > /logs/conda.txt 2>&1
            # conda env update >> /logs/conda.txt 2>&1
            conda env create -n esmvaltool -f environment.yml >> /logs/conda.txt 2>&1
            set +x; conda activate esmvaltool; set -x
            pip install .[test] > /logs/install.txt 2>&1
            esmvaltool install R
            esmvaltool install Julia
            # Remove source to test installed software
            rm -r esmvaltool
            # Log versions
            dpkg -l > /logs/versions.txt
            conda env export > /logs/environment.yml
            pip freeze > /logs/requirements.txt
            # Test installation
            pytest -n 2
            esmvaltool -h
            ncl -V
            # cdo test, check that it supports hdf5
            cdo --version
            echo 0 | cdo -f nc input,r1x1 tmp.nc
            ncdump tmp.nc | ncgen -k hdf5 -o tmp.nc
            cdo -f nc copy tmp.nc tmp2.nc
          no_output_timeout: 30m
      - save_cache:
          key: test-install-{{ .Branch }}
          paths:
            - "/opt/conda/pkgs"
            - ".eggs"
      - store_artifacts:
          path: /logs
      - store_artifacts:
          path: test-reports/
      - store_test_results:
          path: test-reports/

  develop:
    # Test development installation
    working_directory: /develop
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - check_changes
      - run:
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            set -x
            mkdir /logs
            # Install
            wget https://julialang-s3.julialang.org/bin/linux/x64/1.0/julia-1.0.3-linux-x86_64.tar.gz
            tar xfz julia-*-linux-x86_64.tar.gz
            ln -s $(pwd)/julia-*/bin/julia /usr/bin/julia
            # conda update -y conda > /logs/conda.txt 2>&1
            # conda env update >> /logs/conda.txt 2>&1
            conda env create -n esmvaltool -f environment.yml >> /logs/conda.txt 2>&1
            set +x; conda activate esmvaltool; set -x
            pip install -e .[develop] > /logs/install.txt 2>&1
            esmvaltool install R
            esmvaltool install Julia
            # Log versions
            dpkg -l > /logs/versions.txt
            conda env export > /logs/environment.yml
            pip freeze > /logs/requirements.txt
            # Test installation
            pytest -n 2
            esmvaltool -h
            ncl -V
            cdo --version
          no_output_timeout: 30m
      - store_artifacts:
          path: /logs

  documentation:
    # Test building documentation
    working_directory: /doc
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - restore_cache:
          key: documentation-{{ .Branch }}
      - run:
          command: |
            mkdir /logs
            # Install
            pip install -r doc/sphinx/source/requirements.txt > /logs/install.txt 2>&1
            pip install sphinx sphinx_rtd_theme >> /logs/install.txt 2>&1
            # Log versions
            dpkg -l > /logs/versions.txt
            pip freeze > /logs/requirements.txt
            # Test building documentation
            MPLBACKEND=Agg python setup.py build_sphinx --warning-is-error
      - save_cache:
          key: documentation-{{ .Branch }}
          paths:
            - ".eggs"
      - store_artifacts:
          path: /logs

  conda_build:
    # Test conda build
    working_directory: /esmvaltool
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - check_changes
      - run:
          environment:
            R_INSTALL_N_CPUS: 2
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            set -x
            # Install prerequisites
            mkdir /logs
            apt update && apt install time
            wget https://julialang-s3.julialang.org/bin/linux/x64/1.0/julia-1.0.3-linux-x86_64.tar.gz
            tar xfz julia-*-linux-x86_64.tar.gz
            ln -s $(pwd)/julia-*/bin/julia /usr/bin/julia
            conda create -y -n build conda-build conda-verify
            conda activate build
            # Log versions
            dpkg -l > /logs/versions.txt
            conda env export > /logs/build_environment.yml
            # Build conda package
            \time -v conda build package -c conda-forge -c esmvalgroup > /logs/build_log.txt
          no_output_timeout: 60m
      - store_artifacts:
          path: /logs

  conda_install:
    # Test conda package installation
    working_directory: /esmvaltool
    docker:
      - image: continuumio/miniconda3
    steps:
      - run:
          environment:
            R_INSTALL_N_CPUS: 2
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            set -x
            # Install prerequisites
            mkdir /logs
            wget https://julialang-s3.julialang.org/bin/linux/x64/1.0/julia-1.0.3-linux-x86_64.tar.gz
            tar xfz julia-*-linux-x86_64.tar.gz
            ln -s $(pwd)/julia-*/bin/julia /usr/bin/julia
            # conda update -y conda > /logs/conda.txt 2>&1
            # Install ESMValTool in a new conda environment
            conda create -y --name esmvaltool -c esmvalgroup -c conda-forge esmvaltool 'python=3.9'
            # Activate the environment
            set +x; conda activate esmvaltool; set -x
            # Log versions
            conda env export > /logs/environment.yml
            # Test installation
            esmvaltool -h
            ncl -V
            cdo --version
          no_output_timeout: 30m

  ncl_cdo_test:
    # Test ncl and cdo conda packages
    working_directory: /ncl
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - run:
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            set -x
            mkdir /logs
            # Install
            # conda update -y conda > /logs/conda.txt 2>&1
            conda create -y --name ncl > /logs/conda.txt 2>&1
            set +x; conda activate ncl; set -x
            conda install -y --channel conda-forge ncl cdo >> /logs/conda.txt 2>&1
            # Log versions
            dpkg -l > /logs/versions.txt
            conda env export > /logs/environment.yml
            # Test if NCL installed successfully
            ncl -V
            cdo --version
      - store_artifacts:
          path: /logs

workflows:
  commit:
    jobs:
      - test
      - test_installation
      - develop
      - documentation
      - conda_build
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - test
      - test_installation
      - develop
      - documentation
      - conda_build
      - conda_install
      - ncl_cdo_test
