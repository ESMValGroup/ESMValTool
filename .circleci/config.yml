---
version: 2.1

orbs:
  coverage-reporter: codacy/coverage-reporter@11.9.2

commands:
  check_changes:
    steps:
      - run: |
          if (test "$CIRCLE_BRANCH" = main ||
            git --no-pager diff --name-only origin/main... |
            grep -q -E -f .circleci/install_triggers)
          then
            echo Running installation tests
          else
            echo Skipping installation tests
            circleci step halt
          fi

jobs:
  run_tests:
    # Run Python 3 tests
    working_directory: /test
    docker:
      - image: esmvalgroup/esmvaltool:development
    steps:
      - checkout
      - run:
          # Update environment if needed and run tests
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            mkdir /logs
            conda --version > /logs/conda_version.txt
            conda activate esmvaltool
            python --version > /logs/python_version.txt
            conda env export > /logs/environment.yml
            pip install .[test] > /logs/install.txt
            # Run flake8 check with source code (it doesn't work without it)
            pytest -n 2 -m flake8
            # Update/install Julia dependencies
            esmvaltool install Julia > /logs/install_Julia.txt
            # Remove source to test installed software
            rm -r esmvaltool
            pytest -n 2 -m 'not flake8'
      - store_artifacts:
          path: /logs
      - store_artifacts:
          path: test-reports/
      - store_test_results:
          path: test-reports/
      - coverage-reporter/send_report:
          coverage-reports: 'test-reports/coverage.xml'
          project-token: $CODACY_PROJECT_TOKEN
          # Skip if token isn't defined.
          # Useful to let forks CI pass without passing secrets
          skip: true

  test_installation_from_source_test_mode:
    # Test Python 3 installation
    working_directory: /test_installation
    docker:
      - image: condaforge/mambaforge:latest
    steps:
      - checkout
      - check_changes
      - restore_cache:
          key: test-install-{{ .Branch }}
      - run:
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            set -x
            mkdir /logs
            # Install
            mamba create --name esmvaltool 'python=3.10' >> /logs/conda.txt 2>&1
            mamba env update --name esmvaltool >> /logs/conda.txt 2>&1
            set +x; conda activate esmvaltool; set -x
            mamba install julia >> /logs/conda.txt 2>&1
            pip install .[test] > /logs/install.txt 2>&1
            esmvaltool install Julia
            # Remove source to test installed software
            rm -r esmvaltool
            # Log versions
            dpkg -l > /logs/versions.txt
            mamba env export > /logs/environment.yml
            pip freeze > /logs/requirements.txt
            # Test installation
            pytest -n 2
            esmvaltool -h
            ncl -V
            # cdo test, check that it supports hdf5
            cdo --version
            echo 0 | cdo -f nc input,r1x1 tmp.nc
            ncdump tmp.nc | ncgen -k hdf5 -o tmp.nc
            cdo -f nc copy tmp.nc tmp2.nc
          no_output_timeout: 30m
      - save_cache:
          key: test-install-{{ .Branch }}
          paths:
            - "/opt/conda/pkgs"
            - ".eggs"
      - store_artifacts:
          path: /logs
      - store_artifacts:
          path: test-reports/
      - store_test_results:
          path: test-reports/

  test_installation_from_source_develop_mode:
    # Test development installation
    working_directory: /develop
    docker:
      - image: condaforge/mambaforge:latest
    steps:
      - checkout
      - check_changes
      - run:
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            set -x
            mkdir /logs
            # Install
            mamba create --name esmvaltool 'python=3.10' >> /logs/conda.txt 2>&1
            mamba env update --name esmvaltool >> /logs/conda.txt 2>&1
            set +x; conda activate esmvaltool; set -x
            mamba install julia >> /logs/conda.txt 2>&1
            pip install -e .[develop] > /logs/install.txt 2>&1
            esmvaltool install Julia
            # Log versions
            dpkg -l > /logs/versions.txt
            mamba env export > /logs/environment.yml
            pip freeze > /logs/requirements.txt
            # Test installation
            pytest -n 2
            esmvaltool -h
            ncl -V
            cdo --version
          no_output_timeout: 30m
      - store_artifacts:
          path: /logs

  build_documentation:
    # Test building documentation
    working_directory: /doc
    docker:
      - image: condaforge/mambaforge:latest
    steps:
      - checkout
      - restore_cache:
          key: documentation-{{ .Branch }}
      - run:
          command: |
            mkdir /logs
            # Install
            pip install -r doc/sphinx/source/requirements.txt > /logs/install.txt 2>&1
            pip install sphinx sphinx_rtd_theme >> /logs/install.txt 2>&1
            # Log versions
            dpkg -l > /logs/versions.txt
            pip freeze > /logs/requirements.txt
            # Test building documentation
            MPLBACKEND=Agg python setup.py build_sphinx --warning-is-error
      - save_cache:
          key: documentation-{{ .Branch }}
          paths:
            - ".eggs"
      - store_artifacts:
          path: /logs

  test_installation_from_conda:
    # Test conda package installation
    working_directory: /esmvaltool
    docker:
      - image: condaforge/mambaforge
    steps:
      - run:
          environment:
            R_INSTALL_N_CPUS: 2
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            set -x
            # Install prerequisites
            mkdir /logs
            # Install ESMValTool in a new conda environment
            mamba create -y --name esmvaltool -c conda-forge esmvaltool julia 'python=3.10' >> /logs/conda.txt 2>&1
            # Activate the environment
            set +x; conda activate esmvaltool; set -x
            # install the package
            mamba install -c conda-forge esmvaltool >> /logs/install.txt 2>&1
            # Log versions
            mamba env export > /logs/environment.yml
            # Test installation
            esmvaltool -h
            ncl -V
            cdo --version
          no_output_timeout: 30m
      - store_artifacts:
          path: /logs

workflows:
  commit:
    jobs:
      - run_tests
      - test_installation_from_source_test_mode
      - test_installation_from_source_develop_mode
      - build_documentation
      - test_installation_from_conda
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - run_tests
      - test_installation_from_source_test_mode
      - test_installation_from_source_develop_mode
      - build_documentation
      - test_installation_from_conda
