---
version: 2.1

orbs:
  coverage-reporter: codacy/coverage-reporter@11.9.2

commands:
  check_changes:
    steps:
      - run:
          name: Check whether or not installation tests are needed
          command: |
            if (test "$CIRCLE_BRANCH" = main ||
              git --no-pager diff --name-only origin/main... |
              grep -q -E -f .circleci/install_triggers)
            then
              echo Running installation tests
            else
              echo Skipping installation tests
              circleci step halt
            fi
  test_and_report:
    steps:
      - run:
          name: Run tests
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            conda activate esmvaltool
            pytest -n 4 -m 'not flake8' --junitxml=test-reports/report.xml
            esmvaltool version
            esmvaltool -- --help
            ncl -V
            cdo --version
      - store_test_results:
          path: test-reports/
      - store_artifacts:
          path: /logs
      - run:
          name: Compress pytest artifacts
          command: tar -cvzf pytest.tar.gz -C /tmp/pytest-of-root/ .
          when: always
      - store_artifacts:
          path: pytest.tar.gz
      - run:
          name: Compress test-report artifacts
          command: tar -cvzf test-reports.tar.gz test-reports/
          when: always
      - store_artifacts:
          path: test-reports.tar.gz
  test_installation_from_source:
    parameters:
      extra:
        type: string
      flags:
        type: string
        default: ""
    steps:
      - run:
          name: Install git+ssh
          environment:
            DEBIAN_FRONTEND: noninteractive  # needed to install tzdata
          command: apt update && apt install -y git ssh
      - checkout
      - check_changes
      - run:
          name: Generate cache key
          command: date '+%Y-%V' | tee cache_key.txt
      - restore_cache:
          key: install-<< parameters.extra >>-{{ .Branch }}-{{ checksum "cache_key.txt" }}
      - run:
          name: Install dependencies
          command: |
            # Install
            . /opt/conda/etc/profile.d/conda.sh
            mkdir /logs
            mamba env create >> /logs/conda.txt 2>&1
            conda activate esmvaltool
            pip install << parameters.flags >> ".[<<parameters.extra>>]"> /logs/install.txt 2>&1
            esmvaltool install Julia > /logs/install_julia.txt 2>&1
            if [[ "<<parameters.flags>>" != *'--editable'* ]]
            then
              rm -r esmvaltool
            fi
      - run:
          name: Log versions
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            conda activate esmvaltool
            dpkg -l > /logs/versions.txt
            conda env export > /logs/environment.yml
            pip freeze > /logs/requirements.txt
      - run:
          name: Lint source code
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            conda activate esmvaltool
            pytest -n 4 -m flake8
      - test_and_report
      - save_cache:
          key: install-<< parameters.extra >>-{{ .Branch }}-{{ checksum "cache_key.txt" }}
          paths:
            - /opt/conda/pkgs
            - /root/.cache/pip
            - .pytest_cache

jobs:
  run_tests:
    # Run tests
    docker:
      - image: esmvalgroup/esmvaltool:development
    resource_class: large
    steps:
      - checkout
      - run:
          name: Generate cache key
          command: date '+%Y-%V' | tee cache_key.txt
      - restore_cache:
          key: test-{{ .Branch }}-{{ checksum "cache_key.txt" }}
      - run:
          name: Install dependencies
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            mkdir /logs
            conda activate esmvaltool
            pip install .[test] > /logs/install.txt 2>&1
            # Run flake8 check with source code (it doesn't work without it)
            pytest -n 4 -m flake8
            # Update/install Julia dependencies
            esmvaltool install Julia > /logs/install_julia.txt 2>&1
            # Remove source to test installed software
            rm -r esmvaltool
      - test_and_report
      - save_cache:
          key: test-{{ .Branch }}-{{ checksum "cache_key.txt" }}
          paths:
            - /root/.cache/pip
            - .pytest_cache
      - coverage-reporter/send_report:
          coverage-reports: 'test-reports/coverage.xml'
          project-token: $CODACY_PROJECT_TOKEN
          skip: true  # skip if project-token is not defined (i.e. on a fork)

  test_installation_from_source_test_mode:
    # Test installation from source
    docker:
      - image: condaforge/mambaforge
    resource_class: large
    steps:
      - test_installation_from_source:
          extra: test

  test_installation_from_source_develop_mode:
    # Test development installation
    docker:
      - image: condaforge/mambaforge
    resource_class: large
    steps:
      - test_installation_from_source:
          extra: develop
          flags: "--editable"

  build_documentation:
    # Test building documentation
    docker:
      - image: condaforge/mambaforge
    resource_class: small
    steps:
      - checkout
      - run:
          command: |
            mkdir /logs
            . /opt/conda/etc/profile.d/conda.sh
            # Install
            mamba env create
            conda activate esmvaltool
            pip install .[doc]
            # Log versions
            dpkg -l > /logs/versions.txt
            conda env export > /logs/environment.yml
            pip freeze > /logs/requirements.txt
            # Test building documentation
            MPLBACKEND=Agg sphinx-build -W doc/sphinx/source doc/spinx/build
      - store_artifacts:
          path: /logs

  test_installation_from_conda:
    # Test conda package installation
    docker:
      - image: condaforge/mambaforge
    resource_class: medium
    steps:
      - run:
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            set -x
            # Install prerequisites
            mkdir /logs
            # Install ESMValTool in a new conda environment
            mamba create -y --name esmvaltool -c conda-forge esmvaltool julia 'python=3.10' >> /logs/conda.txt 2>&1
            # Activate the environment
            set +x; conda activate esmvaltool; set -x
            # install the Julia dependencies
            esmvaltool install Julia > /logs/install_Julia.txt 2>&1
            # Log versions
            mamba env export > /logs/environment.yml
            # Test installation
            esmvaltool -- --help
            esmvaltool version
            ncl -V
            cdo --version
      - store_artifacts:
          path: /logs

workflows:
  commit:
    jobs:
      - run_tests
      - test_installation_from_source_test_mode
      - test_installation_from_source_develop_mode
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - run_tests
      - test_installation_from_source_test_mode
      - test_installation_from_source_develop_mode
      - build_documentation
      - test_installation_from_conda
