================================================
ESMValTool - Earth System Model eValuation Tool
================================================
(might come under a different name, depending on 
the project specific selection of diagnostics)
================================================
~/ refers to the root path of the software (i.e. the folder holding this README).
XyZ refers to a diagnostic set, e.g. a standard namelist, some basic diagnostics,
or all routines associated with a certain topic. Related files should be named
consistently throughout the tool, i.e. have ?XyZ? in their name. Note that a
standard namelist may in general combine (parts of) different diagnostic sets.
Paths are relative to the root folder of the software.
Suffix "typ" specifies the language the routine is written in.


##############################
# Prerequisites              #
##############################
* Python 2.5 or higher, but not versions 3.* (www.python.org)
* NCL 6.1 or higher (www.ncl.ucar.edu)


##############################
# Executing the software     #
##############################
To run the tool, please adjust a namelist (~/nml/namelist_XyZ), then simply type:
    python main.py nml/namelist_XyZ.xml 
The screen output will tell you what is going on and which files are produced.
For further help, check the doc/-folder for pdfs and references therein.


##############################
# Documentation              #
##############################
~/doc/*                             - Miscellaneous documentation (to be updated)


##############################
# Namelists, configuration   #
##############################
~/nml/namelist_XyZ.xml              - namelists for specifying general parameters,
                                      input data and diagnostics to do
                                      Note: <model> entries in the <MODELS> section will be used in all <diag> 
                                            sections. <model> entries with a <diag> section will be used
                                            only there.  
~/nml/cfg_XyZ/cfg_XyZ.typ           - configuration files for diagnostic scripts
                                      There might be more then one configuration script per diagnostic set.

##############################
# Data folders               #  
##############################
They hold the output generated by the ESMValTool, and may be created on the fly.
Note that these folders do not need to be in the same folder as the source code. 
They can be arbitrarily specified in the namelist, as path relative to the root path. 
Using symbolic links would be another option to separate the actual data from the code.
Folder names thus may differ from the defaults below.

~/climo/                            - climatologies (netCDF) derived from the original data

~/plots/                            - holds produced graphics files

~/work/                             - holds miscellaneous other files produced during execution,
                                      e.g. optional netCDF output and references/acknowledgements


##############################
# Nuts and bolts             #
##############################
~/main.py                           - driver routine, controlling the overall program flow

~/diag_scripts/                     - routines that cover the functionality from fetching
                                      derived data (climo or netCDF produced within diag_scripts)
                                      to output of plots and netCDF files. These routines
                                      may be specified as entries in ~/nml/namelist_*.

~/diag_scripts/lib/*                - supporting routines for diagnostic scripts, sorted by language;
                                      Functions related to the same topic are then collected in one file. 

~/interface_data/                   - dictionary type files used for communication throughout the code:
                                      updated on the fly, based on templates for different languages

~/interface_scripts/                - routines used in more than one root level folder, 
                                      mainly controlling the overall workflow

~/interface_scripts/projects.py     - allows customization of the structure of <model> entries
                                      in nml/namelist, depending on the first (project) entry 

~/plot_scripts/                     - routines that produce plots, sorted in subfolders by language. 
                                      Data may be passed to them directly or via netCDF files.
                                      Logically this is a subfolder of ~/diag_scripts, but has been raised to
                                      root level to highlight separation between diagnostic and plotting routines.

~/reformat_scripts/                 - routines for checking or reformatting raw input data

~/variable_defs/                    - Declaration of variables, variable specific attributes
                                      and calculation of derived variables
