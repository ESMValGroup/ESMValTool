"""
Functions to fetch git SHA information from singularity containers.
"""


def get_shas_from_singularity(dev_version_today, dev_version_yesterday):
    """
    Get git SHAs from ``setuptool-scm`` version strings.

    SCM version strings are generated by the command ``esmvaltool version`` and
    imported as environment variables. Strings include both packages split by
    a newline. E.g.
    ``ESMValCore: 2.13.0.dev54+g82d795ec\nESMValTool: 2.13.0.dev66+g53c339c5c``
    where the short SHA-1s are ``82d795ec`` and ``53c339c5c``.

    Parameters
    ----------
    dev_version_today : str|None
        SCM version string for today's package versions.
    dev_version_yesterday : str|None
        SCM version string for yesterday's package versions.

    Raises
    ------
    ValueError
        If SCM versions do not contain consistent SHAs.

    Returns
    -------
    tuple[list[dict], list[dict]]


    """
    shas = {
        **extract_scm_shas(dev_version_today, "today"),
        **extract_scm_shas(dev_version_yesterday, "yesterday"),
    }
    if not any(shas.values()):
        raise ValueError(
            f"No SHAs found: dev_version_today={dev_version_today}"
            f"dev_version_yesterday={dev_version_yesterday}"
        )

    elif not (shas["core_today"] or shas["tool_today"]):
        raise ValueError(
            f"Today's SHAs not found. dev_version_today={dev_version_today}"
        )

    elif not (shas["core_yesterday"] and shas["tool_yesterday"]):
        print("Only today's git info is available.")
        # commit_info = ()  # construct tuple
    else:
        # commit_info = ()  # construct tuple
        pass
    # TODO: Complete. Should return commit_info once finalise data structure.
    return shas


def extract_scm_shas(dev_versions, day):
    """
    Extract git SHAs from a SCM version string of combined packages.

    Parameters
    ----------
    dev_versions : str | None
        The SCM version string for combined packages, split by a newline.

    day: str
        The day the version represents. E.g `today` or `yesterday`.

    Notes
    -----
    SHA is expected to be 4-40 characters after '+g' and before breaks such
    as `.`. For more info on short SHAs:
    https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection

    Returns
    -------
    sha: dict[str, str | None]
        A dictionary where keys are "<package>_<day>" and the values are the
        short SHAs, or None if no valid short SHA was found. E.g.
        ``{"core_today": abcd123, "tool_today": None}``
    """
    shas = {
        f"core_{day}": None,
        f"tool_{day}": None,
    }

    if isinstance(dev_versions, str):
        for line in dev_versions.strip().splitlines():
            sha = line.split("+g")[1].split(".")[0]
            if line.startswith("ESMValCore:"):
                shas[f"core_{day}"] = sha
            elif line.startswith("ESMValTool:"):
                shas[f"tool_{day}"] = sha

    return shas
