"""
Functions to fetch git SHA information from singularity containers.
"""

from collections import defaultdict


def get_shas_from_singularity(dev_version_today, dev_version_yesterday):
    """
    Get git SHAs from ``setuptool-scm`` version strings.

    SCM version strings are generated by the command ``esmvaltool version`` and
    imported as environment variables. Strings include both packages split by
    a newline. E.g.
    ``ESMValCore: 2.13.0.dev54+g82d795ec\nESMValTool: 2.13.0.dev66+g53c339c5c``
    where the short SHA-1s are ``82d795ec`` and ``53c339c5c``.

    Parameters
    ----------
    dev_version_today : str | None
        SCM version string for today's package versions.
    dev_version_yesterday : str | None
        SCM version string for yesterday's package versions.

    Returns
    -------
    sha: dict[str, dict[str, str]]
        A dictionary where keys are the package and the values are a dict of days and
        short SHAs. E.g. ``{"ESMValCore": {'today': abcd123}...}``.
    """
    shas = defaultdict(dict)
    for package, day_shas in extract_scm_shas(
        dev_version_today, "today"
    ).items():
        shas[package].update(day_shas)
    for package, day_shas in extract_scm_shas(
        dev_version_yesterday, "yesterday"
    ).items():
        shas[package].update(day_shas)
    validate_shas(shas, dev_version_today, dev_version_yesterday)
    return shas


def validate_shas(shas, dev_version_today, dev_version_yesterday):
    """
    Validate extracted SHA combinations.

    These error checks should not be considered exhaustive.

    Raises
    ------
    ValueError
        If SCM versions do not contain consistent SHAs. Errors can be propagated up
        to generate the HTML report without unreliable SHA data.
    """
    if not shas["ESMValCore"] and not shas["ESMValTool"]:
        raise ValueError(
            f"No SHAs found: dev_version_today={dev_version_today}"
            f"dev_version_yesterday={dev_version_yesterday}"
        )

    elif not shas["ESMValCore"].get("today") or not shas["ESMValTool"].get(
        "today"
    ):
        raise ValueError(
            f"Today's SHAs not found. dev_version_today={dev_version_today}"
        )

    elif not (
        shas["ESMValCore"].get("yesterday")
        and shas["ESMValTool"].get("yesterday")
    ):
        print("Only today's SHAs are available.")


def extract_scm_shas(dev_versions, day):
    """
    Extract git SHAs from a SCM version string of combined packages.

    Parameters
    ----------
    dev_versions : str | None
        The SCM version string for combined packages, split by a newline.
    day: str
        The day the versions were tested on. E.g ``today`` or ``yesterday``.

    Notes
    -----
    SHA is expected to be 4-40 characters after '+g' and before breaks such
    as `.`. For more info on short SHAs:
    https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection

    Returns
    -------
    sha: dict[str, dict[str, str]] | dict[str, dict[None]]
        A dictionary where keys are the package and the values are a dict of days and
        short SHAs. E.g. ``{"ESMValCore": {'today': abcd123}...}`` or None if no SHAs
        were found.
    """
    shas = {
        "ESMValCore": {},
        "ESMValTool": {},
    }

    if isinstance(dev_versions, str):
        for line in dev_versions.strip().splitlines():
            sha = line.split("+g")[1].split(".")[0]
            if line.startswith("ESMValCore:"):
                shas["ESMValCore"][day] = sha
            elif line.startswith("ESMValTool:"):
                shas["ESMValTool"][day] = sha

    return shas
