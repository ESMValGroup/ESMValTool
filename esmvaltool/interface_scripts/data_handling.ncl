; #############################################################################
; GENERAL ROUTINES FOR DATA HANDLING
; #############################################################################
; Please consider using of extend
; Check the header of each routine for documentation.
;
; Contents:
;    function read_data
;    function read_fx_data
;
; #############################################################################

undef("read_data")
function read_data(info_item[1]:logical)
;
; Arguments
;    info: a logical describing the current input file as defined in the
;          <variable>_info.ncl file in the preproc director. This is usually
;          an element of the input_file_info list.
;
; Return value
;    The actual data array with all metadata.
;
; Description
;    Retrieve the variable data and metadata based on the input_file_info
;    logical defined in the <varible>_info.ncl automatically generated by
;    the preprocessor and stored in preproc/<preproc_id>/ subdirectory.
;
; Caveats
;
; References
;
; Modification history
;   20180511-righi_mattia: adapted to the revised list-based metadata
;                          structure.
;   20180212-righi_mattia: written.
;
local funcname, scriptname, infile, fin
begin

  funcname = "read_data"
  scriptname = "interface_scripts/data_handling.ncl"
  enter_msg(scriptname, funcname)

  ; Check attribute availability
  if (.not.isatt(info_item, "filename")) then
    error_msg("f", scriptname, funcname, "filename attribute not defined " + \
              "in the interface file " + variable + "_info.ncl")
  end if
  infile = info_item@filename

  ; Check file existence and supported format
  if (.not.isfilepresent(infile)) then
    error_msg("f", scriptname, funcname, "input file " + infile + \
              " not found or not a supported format")
  end if

  ; Open file
  log_info("Reading in file = " + infile)
  fin = addfile(infile, "r")

  ; Check that variable is in the file
  if (.not. isfilevar(fin, info_item@short_name)) then
    error_msg("f", scriptname, funcname, "variable " + variable + \
              " not found in file " + infile)
  end if

  ; Read data
  data = fin->$info_item@short_name$

  leave_msg(scriptname, funcname)
  return(data)

end

; #############################################################################
undef("read_fx_data")
function read_fx_data(info_item[1]:logical,
                      fx_variable[1]:string)
;
; Arguments
;    index: index to current input file as defined in the <variable>_info.ncl
;           file in the preproc directory of the current variable
;    fx_variable: name of the fx variable to read
;
; Return value
;    A list of data array(s) with all metadata or a missing value if the
;    fx variable is not found.
;
; Description
;    Retrieve the fx variable data and metadata based on the input_file_info
;    logical defined in the <variable>_info.ncl file automatically generated
;    by the preprocessor and stored in the preproc/<preproc_id>/ subdirectory.
;    Unlike read_data, this function does not exit on error if the input file
;    is not found. This is to provide more flexibility to the calling
;    diagnostic.
;
; Caveats
;    If auxiliary coordinates are associated to the fx-variables (typically for
;    areacello), these are also read and pushed to the return list.
;
; References
;
; Modification history
;   20180511-righi_mattia: adapted to the revised list-based metadata
;                          structure.
;   20180526-righi_mattia: written.
;
local funcname, scriptname, infile, fin
begin

  funcname = "read_fx_data"
  scriptname = "interface_scripts/data_handling.ncl"
  enter_msg(scriptname, funcname)

  ; Check attribute availability
  if (.not.isatt(info_item, fx_variable)) then
    error_msg("f", scriptname, funcname, "input path for the fx_variable " + \
              fx_variable + " not found in the metadata file, please add " + \
              "'fx_files: [" + fx_variable + "]' to the variable " + \
              "dictionary in the recipe")
  end if
  infile = info_item@$fx_variable$

  ; Return missing if variable not available
  if (ismissing(infile)) then
    error_msg("w", scriptname, funcname, "fx variable " + fx_variable + \
              " not found for dataset " + info_item@dataset)
    out = new(1, float)
    out = default_fillvalue(typeof(out))
    return(out)
  end if

  ; Open file
  log_info("Reading in file = " + infile)
  fin = addfile(infile, "r")

  ; Check that variable is in the file
  if (.not. isfilevar(fin, fx_variable)) then
    error_msg("f", scriptname, funcname, "variable " + fx_variable + \
              " not found in " + infile)
  end if

  ; Initialize list
  outlist = NewList("lifo")

  ; Check if auxiliary coordinates are defined
  atts = getfilevaratts(fin, fx_variable)
  if (any("coordinates".eq.atts)) then
    ; Read auxiliary coordinates in reverse order (for correct order in list)
    coords = fin->$fx_variable$@coordinates
    ncoords = str_fields_count(coords, " ")
    do ii = 1, ncoords
      curr_coord = str_squeeze(str_get_field(coords, ncoords + 1 - ii, " "))
      if (.not. isfilevar(fin, curr_coord)) then
        error_msg("w", scriptname, funcname, "auxiliary coordinate " + \
                  curr_coord + " not found in " + infile + ", skipping")
      else
        ListPush(outlist, fin->$curr_coord$)
      end if
    end do
  end if

  ; Push variable to the list
  ListPush(outlist, fin->$fx_variable$)

  leave_msg(scriptname, funcname)
  return(outlist)

end
