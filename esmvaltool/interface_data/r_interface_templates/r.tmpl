# This is a temporary file updated by Python on the fly
#------------------------------------------------------






figfiles_suffix <- c(<<FIGFILES_SUFFIX>>)
output_file_type <- c(<<OUTPUT_FILE_TYPE>>)

infile_paths  <- c(<<INFILE_PATHS>>)

infiles <- c(<<INFILES>>)

fullpaths <- c(<<FULLPATHS>>)

diag_script <- <<DIAG_SCRIPT>>
verbosity <- as.integer(<<VERBOSITY>>)
start_year <- <<START_YEAR>>
end_year <- <<END_YEAR>>

variables        <- c(<<VARIABLES>>)
variable_def_dir <- c(<<VARIABLE_DEF_DIR>>)

field_types <- c(<<FIELD_TYPES>>)

plot_dir <- c(<<PLOT_DIR>>)
climo_dir <- c(<<CLIMO_DIR>>)

diag_script_cfg <- c(<<DIAG_SCRIPT_CFG>>)


models <- "True"
models_project    <- c(<<MODELS_PROJECT>>)
models_name       <- c(<<MODELS_NAME>>)
models_MIP        <- c(<<MODELS_MIP>>)
models_experiment <- c(<<MODELS_EXPERIMENT>>)
models_ensemble   <- c(<<MODELS_ENSEMBLE>>)
models_start_year <- c(<<MODELS_START_YEAR>>)
models_end_year   <- c(<<MODELS_END_YEAR>>)
models_freq       <- c(<<MODELS_FREQ>>)
models_dir        <- c(<<MODELS_DIR>>)
models_case_name  <- c(<<MODELS_CASE_NAME>>)


interface_get_figure_filename <- function(diag_script_base, 
                                                  variable, 
                                                field_type, 
                                                  aux_info, 
                                                   idx_mod) { 
#   Arguments:
#         @brief Construct a figure output file name
#         @param diag_script_base  -  The diagnostic script running (withouth its suffix)
#         @param variable  -  Current variable
#         @param field_type  -  Current field type
#         @param aux_info  -  User supplied info to put in figure filename
#         @param idx_mod  -  Current model number
    aux_sep <- "_"  # Skip auxiliary separator if no aux_info
    if (aux_info == "") {
        aux_sep <- ""
    }

    if (idx_mod == -1) {
        figure_name <- paste(diag_script_base, "_",
                             variable, "_",
                             field_type,
                             aux_sep,
                             aux_info, sep="")
    } else {
        figure_name <- paste(diag_script_base, "_",
                             variable, "_",
                             field_type, "_",
                             aux_info, aux_sep,
                             figfiles_suffix[idx_mod], sep="")
    }
    figure_name <- gsub("\\$\\{MIP\\}", models_MIP[idx_mod], figure_name)
    figure_name <- gsub("\\$\\{EXP\\}", models_experiment[idx_mod], figure_name)
    return_fig_name <- gsub("_+", "_", figure_name)
}
#
#
interface_replace_place_holders <- function(variable,
                                               field, 
                                                 idx,
                            array_with_place_holders) {
# Arguments:
#         @brief Reconstructs the currend (idx) input path + filename
#         @param variable  -  Current variable
#         @param idx  -  The index to the current model
#         @param field  -  Current field type
#         @param array_with_place_holders  - array with place holder strings

    array_local_copy <- gsub("\\$\\{VARIABLE\\}", variable, array_with_place_holders[idx])
    array_local_copy <- gsub("\\$\\{FIELD\\}", field, array_local_copy)
    array_local_copy <- gsub("\\$\\{MIP\\}", models_MIP[idx], array_local_copy)
    array_local_copy <- gsub("\\$\\{EXP\\}", models_experiment[idx], array_local_copy)
    return_value <- array_local_copy 
}


#
#
interface_get_fullpath <- function (variable,
                                    field, 
                                    idx) {
# Arguments:
#         @brief Reconstructs the currend (idx) input filename
#         @param plots_script_base  -  The running plot script running withouth its suffix
#         @param variable  -  Current variable
#         @param field_type  -  Current field type
    infile <- interface_replace_place_holders(variable, field, idx, fullpaths)
}

interface_get_infile <- function (variable,
                                  field, 
                                  idx) {
# Arguments:
#         @brief Reconstructs the currend (idx) input filename
#         @param plots_script_base  -  The running plot script running withouth its suffix
#         @param variable  -  Current variable
#         @param field_type  -  Current field type
    infile <- interface_replace_place_holders(variable, field, idx, infiles)
}

interface_get_inpath <- function (idx) {
# Arguments:
#         @brief Returns the currend (idx) path to the input filename
#         @param idx  -  The index to the current model
    infile_path <- infile_paths[idx]
}
