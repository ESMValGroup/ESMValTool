;;#############################################################################
;; GFDL-SPECIFIC REFORMAT ROUTINES
;; Author: Erik Mason (GFDL, USA)
;;#############################################################################
;;
;; Description
;;    Reformats the GFDL output to the CMOR standard.
;;
;; Input requirements
;;    Files from the same experiment are collected in a single directory
;;      (and relative subdirectories)
;;    Files are named as <REALM>.<YYYY01>-<YYYY12>.<VARIABLE>.nc
;;    Files cover the same time range
;;    Files contain a time coordinate
;;    Files are generated by GFDL (cdo postprocessed files also supported)
;;
;; Supported fields
;;    T3I,  T3D,  T3M:  (time,plev,lat,lon) on pressure levels
;;    T2Is, T2Ds, T2Ms: (time, lat, lon) surface value or column integration
;;    T2Iz, T2Dz, T2Mz: (time, plev, lat) zonal mean
;;    time = (I)nstantaneous, (D)aily mean, (M) monthly mean
;;
;; Modification history
;;    20151029-A_laue_ax: added infrastructure for saving a list of files read
;;                        to the ESMValTool log-file
;;    20150722-A_maso_er: written.
;;
;;#############################################################################

load "./interface_scripts/messaging.ncl"
load "./interface_data/ncl.interface"

scriptname = "reformat_scripts/EMAC/reformat_GFDL_main.ncl"

; a_laue_ax+

; The list gFileList will be filled by "find_and_read_var" with the filenames of
; all input files processed. We use a global definition of this list because
; passing it as an argument to "find_and_read_var" would require changes to all
; "GFDL_recipe" files, which does not seem to be a good idea.
; The function "write_output" takes this list as an argument to write the names
; of all files to the log-file. After calling write_output, the list gFileList
; and the counter gNFiles are reset.

gFileList = new(10000, string)
gNFiles = 0  ; counter

; a_laue_ax-

;;### GLOBAL SETTINGS #########################################################

begin

    ;; Selected variable (standard name)
    VAR  = getenv("ESMValTool_variable")

    ;; Selected type
    FIELD  = getenv("ESMValTool_field")

    ;; Time period (YEAR1-01 to YEAR2-12 will be processed)
    YEAR1 = toint(getenv("ESMValTool_start_year"))
    YEAR2 = toint(getenv("ESMValTool_end_year"))

    ;; Shift year
    SHIFT_YEAR = toint(getenv("ESMValTool_shift_year"))

    ;; Realm
    REALM = getenv("ESMValTool_realm")

    ;; Experiment number/name
    EXPER   = getenv("ESMValTool_model")

    ;; Model name
    MODEL = "GFDL"

    ;; Project
    PROJECT = getenv("ESMValTool_project")

    ;; Input path (must be existing, data must be monthly-aggregated)
    INPATH  = getenv("ESMValTool_indir_path")

    ;; Output file
    OUTFILE = getenv("ESMValTool_outfile_fullpath")

    ;; Recipe file
    RECIPEFILE = "./reformat_scripts/GFDL/recipes/GFDL_recipe_" + VAR + ".ncl"

end

;;### MAIN ####################################################################

load "./reformat_scripts/GFDL/reformat_GFDL_func.ncl"

begin

    verbosity  = stringtointeger(getenv("ESMValTool_verbosity"))
    enter_msg(scriptname, "", 2)

    info_output("INPATH = " + INPATH, verbosity, 1)

    ;; Check input path
    check_inpath()

    ;; Summary
    info_output("VARIABLE      " + VAR + " (" + FIELD + ")", verbosity, 3)
    info_output("EXPERIMENT    " + EXPER, verbosity, 3)
    info_output("REALM         " + REALM, verbosity, 3)
    info_output("TIME PERIOD   " + "01/" + YEAR1 + "-12/" + YEAR2, \
                verbosity, 3)
    YEAR1 = YEAR1 - SHIFT_YEAR
    YEAR2 = YEAR2 - SHIFT_YEAR
    info_output("ACTUAL PERIOD " + "01/" + sprinti("%0.4i", YEAR1) + \
                "-12/" + sprinti("%0.4i", YEAR2), verbosity, 3)

    info_output("TIME SHIFT    " + "-" + SHIFT_YEAR, verbosity, 3)
    info_output("INPUT PATH    " + INPATH, verbosity, 3)
    info_output("OUTPUT FILE   " + OUTFILE, verbosity, 3)

    ;; Find GFDL name and corresponding stream/file
    GFDL = find_name(VAR)

    ;; Check valid types
    if (.not.isStrSubset(GFDL@type, str_sub_str(FIELD, "M", "?")).and. \
        .not.isStrSubset(GFDL@type, str_sub_str(FIELD, "D", "?")).and. \
        .not.isStrSubset(GFDL@type, str_sub_str(FIELD, "I", "?")))
        print("fatal: reformat_GFDL_main, " + FIELD + \
              " is not a valid type for variable " + VAR)
        status_exit(1)
    end if
    VERT = GFDL@vert
    if (GFDL.eq."#RECIP") then
        info_output("GFDL NAME     see recipes/GFDL_recipe_" + \
                    VAR + ".ncl", verbosity, 3)
    else
        info_output("GFDL NAME     " + GFDL, verbosity, 3)
    end if
    if (VERT.ne."") then
        info_output("VERTICAL      " + VERT, verbosity, 3)
    end if

    ;; Extract variable
    VARPROC = extract_var(GFDL, VERT, YEAR1, YEAR2, VAR)

    ;; Format coordinates
    format_coord(VARPROC)

    ;; Check units
    check_units(VARPROC, VAR)

    ;; Variable attributes (CMOR)
    tmp = var_attrib(VARPROC, VAR)  ; function in constants.ncl

    delete(VARPROC)
    VARPROC = tmp
    delete(tmp)

; A-laue_ax+
;    flist   = "none"
; A-laue_ax-
    fixfile = "none"
    version = getenv("0_ESMValTool_version")

    ; Write output
; A-laue_ax+
    ; gFileList has been filled by "find_and_read_var" called by "extract_var"
    ; (both in reformat_GFDL_func.ncl)
;    write_output(VARPROC, VAR, flist, fixfile, version)
    write_output(VARPROC, VAR, gFileList(0:gNFiles-1), fixfile, version)
; A-laue_ax-

    delete(GFDL)
    delete(VERT)
    delete(VARPROC)

    info_output("OUTFILE = " + OUTFILE, verbosity, 1)

    leave_msg(scriptname, "", 2)

end
