undef("check_params")
procedure check_params(plot_type : string,  field_types : string,  plot_type_info, file_type, refModel, latrange, lonrange, units, YMax_lev,YMin_lev,XMax_year, XMin_year, anom, smooth, trend, multimean, coverage )
local plot_fields, ind_f, file_type
begin
;; check field type is (might eventually be) supported; only TO2Ms at present
;;    field_number = getenv("ESMValTool_ORIG_FIELD_NUMBER")
;;    plot_fields = (/"T3M", "T2Ms", "T2Ds", "T1Ms", "T2Mz", "TO2Ms"/)
    plot_fields = (/ "TO2Ms"/)

    ind_f = ind(plot_fields .eq. field_types)
    if (all(ismissing(ind_f))) then
        print("fatal:can't use field, " + field_types + " for plot_type " + plot_type)
        status_exit(1)
    end if
    delete(plot_fields)
    delete(ind_f)
;;****************************
;; initialisation
;;****************************
    file_type = getenv("ESMValTool_output_file_type")
    if(ismissing(file_type)) then
        file_type = "ps"
    end if
    file_type = str_lower(file_type)
  
    ;; The 'models' array has been loaded data_interface/ncl.interface
    dim_MOD = dimsizes(models@name)
    print(" Got n models: " + dim_MOD)
    A = extract_data(0, data, -1, 0, 0)
    rank = dimsizes(dimsizes(A))
    delete(A)

    ;; ******************************************************************
    ;; check the input parameters
    refModel = "NULL"
    if (isatt(plot_type_info, "refModel")) then
        refModel = plot_type_info@refModel
    end if
    if(rank .gt. 1) then
        if(isvar("latrange")) then
            delete(latrange)
        end if
        if(isatt(plot_type_info, "ts_latrange")) then
            latrange = plot_type_info@ts_latrange
        else
            print("fatal:plot requires variable attribute 'ts_latrange' defined in varDiag.cfg")
            status_exit(1)
        end if

        if(isvar("lonrange")) then
            delete(lonrange)
        end if
        if(isatt(plot_type_info, "ts_lonrange")) then
            lonrange = plot_type_info@ts_lonrange
        else
            if (isStrSubset(field_type0, "z") .eq. False) then
                print("fatal:plot requires variable attribute 'ts_lonrange'  defined in varDiag.cfg ")
                status_exit(1)
            end if
        end if
;; Test or remove the following:
;;        if(field_type0 .eq. "T3M" .or. field_type0 .eq. "T2Mz") then
;;            if(isvar("levrange")) then
;;                delete(levrange)
;;            end if
;;            if(isatt(plot_type_info, "ts_levrange")) then
;;                levrange = plot_type_info@ts_levrange
;;            else
;;                print("fatal:plot requires variable attribute 'ts_levrange' defined in varDiag.cfg ")
;;                status_exit(1)
;;            end if
;;        end if; field_type0

    end if  ; rank = 1

    if(isatt(variable_info, "units")) then
        UNITS = variable_info@units
    end if
    yMax_lev = -1.e20
    yMin_lev = 1.e20
    ;; optional input parameters
;; axes limits
    if(isatt(plot_type_info, "ts_ymax")) then
        yMax_lev = plot_type_info@ts_ymax
    end if
    if(isatt(plot_type_info, "ts_ymin")) then
        yMin_lev = plot_type_info@ts_ymin
    end if
    if(isatt(plot_type_info, "ts_xmax_year")) then
        xMax_year = plot_type_info@ts_xmax_year
    end if
    if(isatt(plot_type_info, "ts_xmin_year")) then
        xMin_year = plot_type_info@ts_xmin_year
    end if
;;    print( "Limits: " + yMin_lev + yMax_lev )
;; plot anomaly flag
    if(isvar("anom")) then
        delete(anom)
    end if
    if(isatt(plot_type_info, "ts_anom")) then
        anom = plot_type_info@ts_anom
    else
        anom = True
    end if
;; plot trend flag
    trend = False
    if(isatt(plot_type_info, "ts_trend")) then
        trend = plot_type_info@ts_trend
    end if
;; plot smoothed data flag
    smooth = False
    if(isatt(plot_type_info, "ts_smooth")) then
        smooth = plot_type_info@ts_smooth
    end if
;; plot mean of models flag
    multimean = False
    if(isatt(plot_type_info, "ts_multimean")) then
        multimean = plot_type_info@ts_multimean
    end if
;; include area covered by observations in plot
    coverage = False
    if(isatt(plot_type_info, "ts_coverage")) then
        coverage = plot_type_info@ts_coverage
    end if


 
end